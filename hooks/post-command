#!/bin/bash

# Helper functions
##################

fail_with_message() {
  display_error "$1" "$2"
  exit 1
}

display_error() {
  ctx="$1"
  message="$2"
  echo "ðŸš¨ $message" >&2
  buildkite-agent annotate --style error "$message<br />" --context "$ctx"
}

display_success() {
  ctx="$1"
  message="$2"
  echo "$message"
  buildkite-agent annotate --style success "$message<br />" --context "$ctx"
}

docker_metadata_list_into_result() {
    # Can be tags or labels
    field="$1"
    filepath="$DOCKER_METADATA_DIR/$field"

    if [[ ! -f "$filepath" ]] ; then
      fail_with_message "trivy-container-scan" "No '$field' directory found in $DOCKER_METADATA_DIR"
    fi

    result=()

    while read -r line; do
      result+=("$line")
    done < "$filepath"
}

docker_metadata_file_exists() {
  file=$1
  if [[ ! -d "${DOCKER_METADATA_DIR:-}" ]] ; then
    return 1
  fi
  if [[ ! -f "$DOCKER_METADATA_DIR/$file" ]] ; then
    return 1
  fi
  return 0
}


# Hook
######

[[ -z "${TRIVY_EXE_PATH}" ]] \
  && fail_with_message "trivy-scan" "TRIVY_EXE_PATH env. is unset or empty"

[[ ! -f "${TRIVY_EXE_PATH}" ]] \
  && fail_with_message "trivy-scan" "trivy exe file does not exist ('${TRIVY_EXE_PATH}')"

# I would prefer to just execute the path pointed-to by this environment
# variable - but that is incompatible with the testing framework. As a
# result, we need to modify PATH to include the directory containing
# the trivy executable.
export PATH="${PATH}:${TRIVY_EXE_PATH%/*}"

args=()
fsargs=()

final_exit_code="${BUILDKITE_PLUGIN_TRIVY_EXIT_CODE:-1}"
args+=("--exit-code" "$final_exit_code")
echo "using exit-code=$final_exit_code option while scanning"

if [[ -n "${BUILDKITE_PLUGIN_TRIVY_SEVERITY:-}" ]] ; then
  args+=("--severity" "${BUILDKITE_PLUGIN_TRIVY_SEVERITY}")
  echo "using non-default severity types"
fi

if [[ -n "${BUILDKITE_PLUGIN_TRIVY_SKIP_FILES:-}" ]] ; then
  fsargs+=("--skip-files" "${BUILDKITE_PLUGIN_TRIVY_SKIP_FILES}")
  echo "skipping files '$BUILDKITE_PLUGIN_TRIVY_SKIP_FILES' from scan "
fi

if [[ -n "${BUILDKITE_PLUGIN_TRIVY_SKIP_DIRS:-}" ]] ; then
  fsargs+=("--skip-dirs" "${BUILDKITE_PLUGIN_TRIVY_SKIP_DIRS}")
  echo "skipping directories '$BUILDKITE_PLUGIN_TRIVY_SKIP_DIRS' from scan "
fi

if [[ -n "${BUILDKITE_PLUGIN_TRIVY_HELM_OVERRIDES_FILE:-}" ]]; then
	echo "scanning with helm overrides"
	trivy conf --helm-values helm-overrides.yaml "${args[@]}" "${fsargs[@]}" .
fi

if [[ "${BUILDKITE_PLUGIN_TRIVY_IGNORE_UNFIXED:-false}" == true ]] ; then
  args+=("--ignore-unfixed")
  echo "ignore-unfixed is set. Will ignore unfixed vulnerabilities"
fi

if [[ -n "${BUILDKITE_PLUGIN_TRIVY_SECURITY_CHECKS:-}" ]] ; then
  fsargs+=("--security-checks" "${BUILDKITE_PLUGIN_TRIVY_SECURITY_CHECKS}")
  echo "using $BUILDKITE_PLUGIN_TRIVY_SECURITY_CHECKS security checks"
else
  echo "using default security checks"
  fsargs+=("--security-checks" "vuln,config")
fi

echo "+++ scanning filesystem"
trivy fs "${args[@]}" "${fsargs[@]}" .
# Status gets overwritten by the next scan, so we save it here
# This way, we actually exit with a failure.
final_status=$?

if [[ $final_status -ne 0 ]]; then
  display_error "trivy-fs-scan" "trivy found vulnerabilities in repository. See the job output for details."
else
  display_success "trivy-fs-scan" "trivy didn't find any relevant vulnerabilities in the repository"
fi


# Verify container image (if any)
targetimageref="${BUILDKITE_PLUGIN_TRIVY_IMAGE_REF:-}"
if [[ -z "$targetimageref" ]] ; then

  # Parse docker-metadata references
  if docker_metadata_file_exists tags ; then
    if docker_metadata_list_into_result tags ; then
      # We only use the first tag that we got from docker-metadata.
      # In theory, all the tags coming from here point to the same
      # image.
      targetimageref="${result[0]}"
      unset result
    fi
  fi
else
  echo "using image '$targetimageref' from parameters"
fi

# We can't parse an image if we have no references to parse.
# This might be intended, so let's just pass.
if [[ -z "$targetimageref" ]]; then
  echo "no image to scan"
  display_success "trivy-container-scan" "No container image was scanned due to a lack of an image reference. This is fine."
  exit $final_status
fi

# If the image is not present locally, pull it
if [[ -z $(docker images -q "$targetimageref" 2> /dev/null) ]]; then
  docker pull "$targetimageref"
else
  echo "image '$targetimageref' already present locally"
fi

echo "+++ scanning container image"
trivy image "${args[@]}" "$targetimageref"
status=$?

if [[ $status -ne 0 ]]; then
  fail_with_message "trivy-container-scan" "trivy found vulnerabilities in the container image. See the job output for details."
else
  display_success "trivy-container-scan" "trivy didn't find any relevant vulnerabilities in the container image"
fi

exit $final_status
